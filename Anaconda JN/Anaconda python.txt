Este tutorial fue ispirado por las clases de Info183 del profe Hujise 

Anaconda es una suite de codigo abierto que abarca una serie de aplicaciones y librerias diseñadas para el desarrollo
de la ciencia de datos. Es basicamente un gestor de entorno que lo hace muy util para crear dichos entornos para cada
proyecto por separado.

Anaconda tiene muchas caracteristicas con ventajas y desventajas, aunque ahora nos centraremos en jupyter notebook.
Algunas de las principales ventajas de conda son:

-Libre, de código abierto, cuenta con una documentación bastante detallada y una gran comunidad.
-Multiplataforma
-Permite instalar y administrar paquetes, dependencias y entornos para la Ciencias de Datos con Python de una manera muy sencilla.
-Ayuda a desarrollar proyectos de Ciencia de datos utilizando diversos entornos de desarrollo como Jupyter, JupyterLab, Spyder y RStudio.
-Cuenta con herramientas como Dask y Numba para analizar Datos.
-Permite visualizar datos con Bokeh , Datashader , Holoviews o Matplotlib.
-Contiene una gran variedad de aplicaciones relacionadas con el aprendizaje de máquina y los modelos de aprendizaje.
-Anaconda Navigator es una interfaz gráfica de usuario GUI bastante sencilla, pero con mucho potencial.
-Puede gestionar de manera avanzada paquetes relacionados a la Ciencia de Datos
-Brinda la posibilidad de acceder a recursos de aprendizaje más avanzados.
-Elimina problemas de dependencia de paquetes y control de versiones.
-Está equipado con herramientas que permiten crear y compartir documentos que contienen código con compilación en vivo.
-Permite compilar Python para una ejecución rápida.
-Facilita la escritura de algoritmos complejos.
-Cuenta con soporte para computación de alto rendimiento.
-Permite compartir proyectos con otros y ejecutar proyectos en diferentes plataformas.
-Simplifica de manera acelerada la implementación de proyectos de Ciencia de Datos.

Desventajas:
-Su instalacion es mas pesada que lo normal en entornos de programacion debido a su gran cantidad de librerias
-En un numero elevado de datos y/o operaciones en Jupyter Notebook puede no ser muy eficiente.

Instalacion

Windows:   https://www.anaconda.com/products/individual

Linix: https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html

JupyterNotebook permite la compilacion y ejecucion rapida e intuitiva de python pudiendo ver los resultados linea a
linea, pudiendo igual visualizar graficas con distintas librerias y viendo sus cambios de manera mas ordenada.

Iimportaciones:

%matplotlib inline
import numpy as np
import scipy.signal
import matplotlib.pylab as plt
from matplotlib import animation, patches, rc
import ipywidgets as widgets
import matplotlib as mpl
rc('animation', html='html5')
rc('savefig', dpi=80)
rc('figure', dpi=80)
from IPython.display import YouTubeVideo, HTML, Audio

Importaciones en general cualquier cosa de python se puede ejecutar, siendo la visualizacion de datos en graficas
donde mas resalta el entorno de jupyternotebook.

Es importante correr cada parte desde arriba hacia abajo para que se importen y ejecute debidamente el codigo.

x = np.linspace(-10, 10, num=1000)
ax[0, 0].plot(x, x, label='y = x');  
ax[0, 0].plot(x, np.absolute(x), label='y = |x|', linestyle='--');  ax[0, 0].legend()
ax[0, 1].plot(x[x>0], np.sqrt(x[x>0]), label='y = sqrt(x)'); 
ax[0, 1].plot(x[x>0], np.log(x[x>0]), label='y = log(x)', linestyle='--');  ax[0, 1].legend();
ax[0, 2].plot(x, np.exp(0.25*x), label='y = exp(x/4)');
ax[0, 2].plot(x, np.exp(-0.25*x), label='y = exp(-x/4)', linestyle='--');  ax[0, 2].legend(); 
ax[1, 0].plot(x, np.cos(x), label='y=cos(x)')
ax[1, 0].plot(x, np.sin(x), label='y=sin(x)', linestyle='--'); ax[1, 0].legend(loc=1)
ax[1, 1].plot(x, np.heaviside(x, 0), label='y=step(x)'); 
ax[1, 1].plot(x, 1.0/(1.0+np.exp(-x)), label='y=logit(x)', linestyle='--'); ax[1, 1].legend(loc=1)
ax[1, 2].plot(x, scipy.signal.unit_impulse(len(x), 'mid'), label='y=delta(x)');
ax[1, 2].plot(x, np.exp(-0.5*x**2), label='y=exp(-x^2)', linestyle='--'); ax[1, 2].legend(loc=1);

El anterior codigo muestra las funciones mas comunes y se pueden cambiar sus valores viendo sus cambios facilmente dando en Run.

Observavion:
	-Al colocar ? al final de un comando, este nos mostrara la documendacion de este, dando parametros,
	 retornos y ejemplos.

Ejemplo: np.linspace?

Signature:
np.linspace(
    start,
    stop,
    num=50,
    endpoint=True,
    retstep=False,
    dtype=None,
    axis=0,
)
Docstring:
Return evenly spaced numbers over a specified interval.

Returns `num` evenly spaced samples, calculated over the
interval [`start`, `stop`].

The endpoint of the interval can optionally be excluded.

.. versionchanged:: 1.16.0
    Non-scalar `start` and `stop` are now supported.

Parameters
----------
start : array_like
    The starting value of the sequence.
stop : array_like
    The end value of the sequence, unless `endpoint` is set to False.
    In that case, the sequence consists of all but the last of ``num + 1``
    evenly spaced samples, so that `stop` is excluded.  Note that the step
    size changes when `endpoint` is False.
num : int, optional
    Number of samples to generate. Default is 50. Must be non-negative.
endpoint : bool, optional
    If True, `stop` is the last sample. Otherwise, it is not included.
    Default is True.
retstep : bool, optional
    If True, return (`samples`, `step`), where `step` is the spacing
    between samples.
dtype : dtype, optional
    The type of the output array.  If `dtype` is not given, infer the data
    type from the other input arguments.

    .. versionadded:: 1.9.0

axis : int, optional
    The axis in the result to store the samples.  Relevant only if start
    or stop are array-like.  By default (0), the samples will be along a
    new axis inserted at the beginning. Use -1 to get an axis at the end.

    .. versionadded:: 1.16.0

Returns
-------
samples : ndarray
    There are `num` equally spaced samples in the closed interval
    ``[start, stop]`` or the half-open interval ``[start, stop)``
    (depending on whether `endpoint` is True or False).
step : float, optional
    Only returned if `retstep` is True

    Size of spacing between samples.


See Also
--------
arange : Similar to `linspace`, but uses a step size (instead of the
         number of samples).
geomspace : Similar to `linspace`, but with numbers spaced evenly on a log
            scale (a geometric progression).
logspace : Similar to `geomspace`, but with the end points specified as
           logarithms.

Examples
--------
>>> np.linspace(2.0, 3.0, num=5)
array([2.  , 2.25, 2.5 , 2.75, 3.  ])
>>> np.linspace(2.0, 3.0, num=5, endpoint=False)
array([2. ,  2.2,  2.4,  2.6,  2.8])
>>> np.linspace(2.0, 3.0, num=5, retstep=True)
(array([2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)

Graphical illustration:

>>> import matplotlib.pyplot as plt
>>> N = 8
>>> y = np.zeros(N)
>>> x1 = np.linspace(0, 10, N, endpoint=True)
>>> x2 = np.linspace(0, 10, N, endpoint=False)
>>> plt.plot(x1, y, 'o')
[<matplotlib.lines.Line2D object at 0x...>]
>>> plt.plot(x2, y + 0.5, 'o')
[<matplotlib.lines.Line2D object at 0x...>]
>>> plt.ylim([-0.5, 1])
(-0.5, 1)
>>> plt.show()
File:      c:\users\benito\anaconda3\lib\site-packages\numpy\core\function_base.py
Type:      function

En general esto resulta muy util a la hora de querer trabajar ya que facilita la obtencion de
datos que muchas veces no recordamos.

Para mostrar un ejemplo mas completo se dejara un proyecto cientifico de analisis de señales que se encontraba en proceso
mientras se hacia este tutorial, cabe destacar que el proyecto fue echo por dos personas Benito Hermosilla y Monica Higuera.

	 



